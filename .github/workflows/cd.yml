name: cd

on:
  push:
    branches: [main]

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25.1"

      - name: Build app
        run: ./scripts/buildprod.sh

      - id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

       - name: Build and push Docker image (Cloud Build)
        run: |
          set -euo pipefail
          SHORT_SHA="${GITHUB_SHA::7}"
          BASE_PATH="${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE_NAME}"
          IMAGE_SHA_TAG="${BASE_PATH}:${SHORT_SHA}"
          IMAGE_LATEST_TAG="${BASE_PATH}:latest"
          echo "Building and pushing image tagged with commit: ${IMAGE_SHA_TAG}"
          gcloud builds submit --tag "${IMAGE_SHA_TAG}" .
          echo "Adding 'latest' tag referencing same image digest"
          gcloud container images add-tag "${IMAGE_SHA_TAG}" "${IMAGE_LATEST_TAG}" --quiet
          echo "Image available as: ${IMAGE_SHA_TAG} and ${IMAGE_LATEST_TAG}"

      - name: Install goose
        run: go install github.com/pressly/goose/v3/cmd/goose@latest

      - name: Run migrations
        run: ./scripts/migrateup.sh

      - name: Deploy to Cloud Run
        run: |
          set -euo pipefail
          SHORT_SHA="${GITHUB_SHA::7}"
          IMAGE_PATH="${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE_NAME}:${SHORT_SHA}"
          echo "Deploying ${IMAGE_PATH} to Cloud Run service 'notely' in region ${REGION}"          
          gcloud run deploy notely \
            --image "${IMAGE_PATH}" \
            --region "${REGION}" \
            --allow-unauthenticated \
            --project "${PROJECT_ID}" \
            --max-instances=4 \
            --set-env-vars "PORT=8080,DATABASE_URL=${DATABASE_URL}" \
            --platform=managed
          echo "Deployment complete"